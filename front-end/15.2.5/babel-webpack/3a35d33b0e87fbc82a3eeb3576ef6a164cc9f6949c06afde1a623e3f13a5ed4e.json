{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet CalenderComponent = class CalenderComponent {\n  constructor(modal) {\n    this.modal = modal;\n    this.view = CalendarView.Month;\n    this.CalendarView = CalendarView;\n    this.viewDate = new Date();\n    this.actions = [{\n      label: '<i class=\"fas fa-fw fa-pencil-alt\"></i>',\n      a11yLabel: 'Edit',\n      onClick: ({\n        event\n      }) => {\n        this.handleEvent('Edited', event);\n      }\n    }, {\n      label: '<i class=\"fas fa-fw fa-trash-alt\"></i>',\n      a11yLabel: 'Delete',\n      onClick: ({\n        event\n      }) => {\n        this.events = this.events.filter(iEvent => iEvent !== event);\n        this.handleEvent('Deleted', event);\n      }\n    }];\n    this.refresh = new Subject();\n    this.events = [{\n      start: subDays(startOfDay(new Date()), 1),\n      end: addDays(new Date(), 1),\n      title: 'A 3 day event',\n      color: {\n        ...colors.red\n      },\n      actions: this.actions,\n      allDay: true,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true\n      },\n      draggable: true\n    }, {\n      start: startOfDay(new Date()),\n      title: 'An event with no end date',\n      color: {\n        ...colors.yellow\n      },\n      actions: this.actions\n    }, {\n      start: subDays(endOfMonth(new Date()), 3),\n      end: addDays(endOfMonth(new Date()), 3),\n      title: 'A long event that spans 2 months',\n      color: {\n        ...colors.blue\n      },\n      allDay: true\n    }, {\n      start: addHours(startOfDay(new Date()), 2),\n      end: addHours(new Date(), 2),\n      title: 'A draggable and resizable event',\n      color: {\n        ...colors.yellow\n      },\n      actions: this.actions,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true\n      },\n      draggable: true\n    }];\n    this.activeDayIsOpen = true;\n  }\n  dayClicked({\n    date,\n    events\n  }) {\n    if (isSameMonth(date, this.viewDate)) {\n      if (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true || events.length === 0) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n      }\n      this.viewDate = date;\n    }\n  }\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd\n  }) {\n    this.events = this.events.map(iEvent => {\n      if (iEvent === event) {\n        return {\n          ...event,\n          start: newStart,\n          end: newEnd\n        };\n      }\n      return iEvent;\n    });\n    this.handleEvent('Dropped or resized', event);\n  }\n  handleEvent(action, event) {\n    this.modalData = {\n      event,\n      action\n    };\n    this.modal.open(this.modalContent, {\n      size: 'lg'\n    });\n  }\n  addEvent() {\n    this.events = [...this.events, {\n      title: 'New event',\n      start: startOfDay(new Date()),\n      end: endOfDay(new Date()),\n      color: colors.red,\n      draggable: true,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true\n      }\n    }];\n  }\n  deleteEvent(eventToDelete) {\n    this.events = this.events.filter(event => event !== eventToDelete);\n  }\n  setView(view) {\n    this.view = view;\n  }\n  closeOpenMonthViewDay() {\n    this.activeDayIsOpen = false;\n  }\n};\n__decorate([ViewChild('modalContent', {\n  static: true\n})], CalenderComponent.prototype, \"modalContent\", void 0);\nCalenderComponent = __decorate([Component({\n  selector: 'app-calender',\n  templateUrl: './calender.component.html',\n  styleUrls: ['./calender.component.css']\n})], CalenderComponent);\nexport { CalenderComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","CalenderComponent","constructor","modal","CalendarView","Month","Date","label","a11yLabel","onClick","event","handleEvent","events","filter","iEvent","Subject","start","subDays","startOfDay","end","addDays","title","color","colors","red","actions","allDay","resizable","beforeStart","afterEnd","draggable","yellow","endOfMonth","blue","addHours","dayClicked","date","isSameMonth","viewDate","isSameDay","activeDayIsOpen","length","eventTimesChanged","newStart","newEnd","map","action","modalData","open","modalContent","size","addEvent","endOfDay","deleteEvent","eventToDelete","setView","view","closeOpenMonthViewDay","__decorate","static","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\pranavj\\Desktop\\learn angular\\hotel_inventory_app\\allinone_airbnb\\src\\app\\calender\\calender.component.ts"],"sourcesContent":["import { Component, TemplateRef, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'app-calender',\n  templateUrl: './calender.component.html',\n  styleUrls: ['./calender.component.css']\n})\nexport class CalenderComponent {\n\n  @ViewChild('modalContent', { static: true }) modalContent: TemplateRef<any>;\n\n  view: CalendarView = CalendarView.Month;\n\n  CalendarView = CalendarView;\n\n  viewDate: Date = new Date();\n\n  modalData: {\n    action: string;\n    event: CalendarEvent;\n  };\n\n  actions: CalendarEventAction[] = [\n    {\n      label: '<i class=\"fas fa-fw fa-pencil-alt\"></i>',\n      a11yLabel: 'Edit',\n      onClick: ({ event }: { event: CalendarEvent }): void => {\n        this.handleEvent('Edited', event);\n      },\n    },\n    {\n      label: '<i class=\"fas fa-fw fa-trash-alt\"></i>',\n      a11yLabel: 'Delete',\n      onClick: ({ event }: { event: CalendarEvent }): void => {\n        this.events = this.events.filter((iEvent) => iEvent !== event);\n        this.handleEvent('Deleted', event);\n      },\n    },\n  ];\n\n  refresh = new Subject<void>();\n\n  events: CalendarEvent[] = [\n    {\n      start: subDays(startOfDay(new Date()), 1),\n      end: addDays(new Date(), 1),\n      title: 'A 3 day event',\n      color: { ...colors.red },\n      actions: this.actions,\n      allDay: true,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n    {\n      start: startOfDay(new Date()),\n      title: 'An event with no end date',\n      color: { ...colors.yellow },\n      actions: this.actions,\n    },\n    {\n      start: subDays(endOfMonth(new Date()), 3),\n      end: addDays(endOfMonth(new Date()), 3),\n      title: 'A long event that spans 2 months',\n      color: { ...colors.blue },\n      allDay: true,\n    },\n    {\n      start: addHours(startOfDay(new Date()), 2),\n      end: addHours(new Date(), 2),\n      title: 'A draggable and resizable event',\n      color: { ...colors.yellow },\n      actions: this.actions,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n  ];\n\n  activeDayIsOpen: boolean = true;\n\n  constructor(private modal: NgbModal) {}\n\n  dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\n    if (isSameMonth(date, this.viewDate)) {\n      if (\n        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n        events.length === 0\n      ) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n      }\n      this.viewDate = date;\n    }\n  }\n\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd,\n  }: CalendarEventTimesChangedEvent): void {\n    this.events = this.events.map((iEvent) => {\n      if (iEvent === event) {\n        return {\n          ...event,\n          start: newStart,\n          end: newEnd,\n        };\n      }\n      return iEvent;\n    });\n    this.handleEvent('Dropped or resized', event);\n  }\n\n  handleEvent(action: string, event: CalendarEvent): void {\n    this.modalData = { event, action };\n    this.modal.open(this.modalContent, { size: 'lg' });\n  }\n\n  addEvent(): void {\n    this.events = [\n      ...this.events,\n      {\n        title: 'New event',\n        start: startOfDay(new Date()),\n        end: endOfDay(new Date()),\n        color: colors.red,\n        draggable: true,\n        resizable: {\n          beforeStart: true,\n          afterEnd: true,\n        },\n      },\n    ];\n  }\n\n  deleteEvent(eventToDelete: CalendarEvent) {\n    this.events = this.events.filter((event) => event !== eventToDelete);\n  }\n\n  setView(view: CalendarView) {\n    this.view = view;\n  }\n\n  closeOpenMonthViewDay() {\n    this.activeDayIsOpen = false;\n  }\n}\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [\n    `\n      h3 {\n        margin: 0 0 10px;\n      }\n\n      pre {\n        background-color: #f5f5f5;\n        padding: 15px;\n      }\n    `,\n  ],\n  templateUrl: 'template.html',\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}