{"ast":null,"code":"import { getValue, setValue, isNullOrUndefined, isObject } from '@syncfusion/ej2-base';\n/**\n * Angular Form Base Module\n */\nvar FormBase = /** @class */function () {\n  function FormBase() {}\n  FormBase.prototype.propagateChange = function (_) {\n    return;\n  };\n  FormBase.prototype.propagateTouch = function () {\n    return;\n  };\n  FormBase.prototype.localChange = function (e) {\n    //tslint:disable-next-line\n    var value = e.checked === undefined ? e.value : e.checked;\n    this.objCheck = isObject(value);\n    if (this.isUpdated === true) {\n      this.angularValue = this.oldValue;\n    }\n    if (this.objCheck === true) {\n      this.duplicateValue = JSON.stringify(value);\n      this.duplicateAngularValue = JSON.stringify(this.angularValue);\n      if (this.duplicateValue !== this.duplicateAngularValue && this.propagateChange !== undefined && value !== undefined) {\n        // Update angular from our control\n        this.propagateChange(value);\n        this.angularValue = value;\n      }\n    } else {\n      if (value !== this.angularValue && this.propagateChange !== undefined && value !== undefined) {\n        // While reset form using reset() method ng-dirty not get updated, so while value is empty just update angularValue only\n        if (value !== '' && value !== null) {\n          // Update angular from our control\n          this.propagateChange(value);\n          this.angularValue = value;\n        } else {\n          //tslint:disable-next-line\n          var optionalValue = value;\n          this.propagateChange(optionalValue);\n          this.angularValue = value;\n        }\n      }\n    }\n  };\n  FormBase.prototype.registerOnChange = function (registerFunction) {\n    this.propagateChange = registerFunction;\n  };\n  FormBase.prototype.registerOnTouched = function (registerFunction) {\n    this.propagateTouch = registerFunction;\n  };\n  FormBase.prototype.twoWaySetter = function (newVal, prop) {\n    var oldVal = this.oldValue || getValue(prop, this.properties);\n    var ele = this.inputElement || this.element;\n    if (ele && oldVal === newVal && this.value === newVal && (ele.value === undefined || ele.value === '')) {\n      return;\n    }\n    this.saveChanges(prop, newVal, oldVal);\n    setValue(prop, isNullOrUndefined(newVal) ? null : newVal, this.properties);\n    getValue(prop + 'Change', this).emit(newVal);\n  };\n  // tslint:disable-next-line:no-any\n  FormBase.prototype.ngAfterViewInit = function (isTempRef) {\n    // tslint:disable-next-line:no-any\n    var tempFormAfterViewThis = isTempRef || this;\n    // Used setTimeout for template binding\n    // Refer Link: https://github.com/angular/angular/issues/6005\n    // Removed setTimeout, Because we have called markForCheck() method in Angular Template Compiler\n    /* istanbul ignore else */\n    if (typeof window !== 'undefined') {\n      tempFormAfterViewThis.appendTo(tempFormAfterViewThis.element);\n      var ele = tempFormAfterViewThis.inputElement || tempFormAfterViewThis.element;\n      ele.addEventListener('focus', tempFormAfterViewThis.ngOnFocus.bind(tempFormAfterViewThis));\n      ele.addEventListener('blur', tempFormAfterViewThis.ngOnBlur.bind(tempFormAfterViewThis));\n    }\n    this.isFormInit = false;\n  };\n  FormBase.prototype.setDisabledState = function (disabled) {\n    this.enabled = !disabled;\n    this.disabled = disabled;\n  };\n  FormBase.prototype.writeValue = function (value) {\n    var regExp = /ejs-radiobutton/g;\n    //update control value from angular\n    if (this.checked === undefined) {\n      this.value = value;\n    } else {\n      // To resolve boolean type formControl value is not working for radio button control.\n      /* istanbul ignore next */\n      if (this.ngEle) {\n        if (typeof value === 'boolean') {\n          if (regExp.test(this.ngEle.nativeElement.outerHTML)) {\n            this.checked = value === this.value;\n          } else {\n            this.checked = value;\n          }\n        } else {\n          this.checked = value === this.value;\n        }\n      }\n    }\n    this.angularValue = value;\n    this.isUpdated = true;\n    // When binding Html textbox value to syncfusion textbox, change event triggered dynamically.\n    // To prevent change event, trigger change in component side based on `preventChange` value\n    this.preventChange = this.isFormInit ? false : true;\n    if (value === null) {\n      return;\n    }\n  };\n  FormBase.prototype.ngOnFocus = function (e) {\n    /* istanbul ignore else */\n    if (this.skipFromEvent !== true) {\n      this.focus.emit(e);\n    }\n  };\n  FormBase.prototype.ngOnBlur = function (e) {\n    this.propagateTouch();\n    /* istanbul ignore else */\n    if (this.skipFromEvent !== true) {\n      this.blur.emit(e);\n    }\n  };\n  FormBase.isFormBase = true;\n  return FormBase;\n}();\nexport { FormBase };","map":{"version":3,"names":["getValue","setValue","isNullOrUndefined","isObject","FormBase","prototype","propagateChange","_","propagateTouch","localChange","e","value","checked","undefined","objCheck","isUpdated","angularValue","oldValue","duplicateValue","JSON","stringify","duplicateAngularValue","optionalValue","registerOnChange","registerFunction","registerOnTouched","twoWaySetter","newVal","prop","oldVal","properties","ele","inputElement","element","saveChanges","emit","ngAfterViewInit","isTempRef","tempFormAfterViewThis","window","appendTo","addEventListener","ngOnFocus","bind","ngOnBlur","isFormInit","setDisabledState","disabled","enabled","writeValue","regExp","ngEle","test","nativeElement","outerHTML","preventChange","skipFromEvent","focus","blur","isFormBase"],"sources":["C:/Users/pranavj/Desktop/learn angular/hotel_inventory_app/allinone_airbnb/node_modules/@syncfusion/ej2-angular-base/src/form-base.js"],"sourcesContent":["import { getValue, setValue, isNullOrUndefined, isObject } from '@syncfusion/ej2-base';\n/**\n * Angular Form Base Module\n */\nvar FormBase = /** @class */ (function () {\n    function FormBase() {\n    }\n    FormBase.prototype.propagateChange = function (_) { return; };\n    FormBase.prototype.propagateTouch = function () { return; };\n    FormBase.prototype.localChange = function (e) {\n        //tslint:disable-next-line\n        var value = (e.checked === undefined ? e.value : e.checked);\n        this.objCheck = isObject(value);\n        if (this.isUpdated === true) {\n            this.angularValue = this.oldValue;\n        }\n        if (this.objCheck === true) {\n            this.duplicateValue = JSON.stringify(value);\n            this.duplicateAngularValue = JSON.stringify(this.angularValue);\n            if (this.duplicateValue !== this.duplicateAngularValue && this.propagateChange !== undefined && value !== undefined) {\n                // Update angular from our control\n                this.propagateChange(value);\n                this.angularValue = value;\n            }\n        }\n        else {\n            if (value !== this.angularValue && this.propagateChange !== undefined && value !== undefined) {\n                // While reset form using reset() method ng-dirty not get updated, so while value is empty just update angularValue only\n                if (value !== '' && value !== null) {\n                    // Update angular from our control\n                    this.propagateChange(value);\n                    this.angularValue = value;\n                }\n                else {\n                    //tslint:disable-next-line\n                    var optionalValue = value;\n                    this.propagateChange(optionalValue);\n                    this.angularValue = value;\n                }\n            }\n        }\n    };\n    FormBase.prototype.registerOnChange = function (registerFunction) {\n        this.propagateChange = registerFunction;\n    };\n    FormBase.prototype.registerOnTouched = function (registerFunction) {\n        this.propagateTouch = registerFunction;\n    };\n    FormBase.prototype.twoWaySetter = function (newVal, prop) {\n        var oldVal = this.oldValue || getValue(prop, this.properties);\n        var ele = this.inputElement || this.element;\n        if (ele && oldVal === newVal && this.value === newVal &&\n            (ele.value === undefined || ele.value === '')) {\n            return;\n        }\n        this.saveChanges(prop, newVal, oldVal);\n        setValue(prop, (isNullOrUndefined(newVal) ? null : newVal), this.properties);\n        getValue(prop + 'Change', this).emit(newVal);\n    };\n    // tslint:disable-next-line:no-any\n    FormBase.prototype.ngAfterViewInit = function (isTempRef) {\n        // tslint:disable-next-line:no-any\n        var tempFormAfterViewThis = isTempRef || this;\n        // Used setTimeout for template binding\n        // Refer Link: https://github.com/angular/angular/issues/6005\n        // Removed setTimeout, Because we have called markForCheck() method in Angular Template Compiler\n        /* istanbul ignore else */\n        if (typeof window !== 'undefined') {\n            tempFormAfterViewThis.appendTo(tempFormAfterViewThis.element);\n            var ele = tempFormAfterViewThis.inputElement || tempFormAfterViewThis.element;\n            ele.addEventListener('focus', tempFormAfterViewThis.ngOnFocus.bind(tempFormAfterViewThis));\n            ele.addEventListener('blur', tempFormAfterViewThis.ngOnBlur.bind(tempFormAfterViewThis));\n        }\n        this.isFormInit = false;\n    };\n    FormBase.prototype.setDisabledState = function (disabled) {\n        this.enabled = !disabled;\n        this.disabled = disabled;\n    };\n    FormBase.prototype.writeValue = function (value) {\n        var regExp = /ejs-radiobutton/g;\n        //update control value from angular\n        if (this.checked === undefined) {\n            this.value = value;\n        }\n        else {\n            // To resolve boolean type formControl value is not working for radio button control.\n            /* istanbul ignore next */\n            if (this.ngEle) {\n                if (typeof value === 'boolean') {\n                    if (regExp.test(this.ngEle.nativeElement.outerHTML)) {\n                        this.checked = value === this.value;\n                    }\n                    else {\n                        this.checked = value;\n                    }\n                }\n                else {\n                    this.checked = value === this.value;\n                }\n            }\n        }\n        this.angularValue = value;\n        this.isUpdated = true;\n        // When binding Html textbox value to syncfusion textbox, change event triggered dynamically.\n        // To prevent change event, trigger change in component side based on `preventChange` value\n        this.preventChange = this.isFormInit ? false : true;\n        if (value === null) {\n            return;\n        }\n    };\n    FormBase.prototype.ngOnFocus = function (e) {\n        /* istanbul ignore else */\n        if (this.skipFromEvent !== true) {\n            this.focus.emit(e);\n        }\n    };\n    FormBase.prototype.ngOnBlur = function (e) {\n        this.propagateTouch();\n        /* istanbul ignore else */\n        if (this.skipFromEvent !== true) {\n            this.blur.emit(e);\n        }\n    };\n    FormBase.isFormBase = true;\n    return FormBase;\n}());\nexport { FormBase };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}