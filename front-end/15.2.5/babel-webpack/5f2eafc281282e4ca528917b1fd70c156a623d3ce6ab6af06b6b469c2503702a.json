{"ast":null,"code":"import { Areas } from 'mock_areas';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AreaService {\n  constructor() {}\n  getAreas() {\n    const areas = of(Areas);\n    return areas;\n  }\n  getArea(id) {\n    const area = Areas.find(a => a.id === id);\n    return of(area);\n  }\n  toggleLike(id) {\n    for (let i = 0; i < Areas.length; i++) {\n      if (Areas[i].id === id) Areas[i].liked = !Areas[i].liked;\n    }\n  }\n}\nAreaService.ɵfac = function AreaService_Factory(t) {\n  return new (t || AreaService)();\n};\nAreaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AreaService,\n  factory: AreaService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,KAAK,QAAQ,YAAY;AAClC,SAAqBC,EAAE,QAAQ,MAAM;;AAKrC,OAAM,MAAOC,WAAW;EACtBC,eAAe;EAEfC,QAAQ;IACN,MAAMC,KAAK,GAAGJ,EAAE,CAACD,KAAK,CAAC;IACvB,OAAOK,KAAK;EACd;EACAC,OAAO,CAACC,EAAU;IAChB,MAAMC,IAAI,GAAGR,KAAK,CAACS,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IAC3C,OAAON,EAAE,CAACO,IAAI,CAAC;EACjB;EAEAG,UAAU,CAACJ,EAAU;IACnB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,KAAK,CAACa,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIZ,KAAK,CAACY,CAAC,CAAC,CAACL,EAAE,KAAKA,EAAE,EAAEP,KAAK,CAACY,CAAC,CAAC,CAACE,KAAK,GAAG,CAACd,KAAK,CAACY,CAAC,CAAC,CAACE,KAAK;;EAE5D;;AAhBWZ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAa,SAAXb,WAAW;EAAAc,YAFV;AAAM","names":["Areas","of","AreaService","constructor","getAreas","areas","getArea","id","area","find","a","toggleLike","i","length","liked","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pranavj\\Desktop\\learn angular\\hotel_inventory_app\\allinone_airbnb\\src\\app\\area.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Area } from 'area';\nimport { Areas } from 'mock_areas';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AreaService {\n  constructor() {}\n\n  getAreas(): Observable<Area[]> {\n    const areas = of(Areas);\n    return areas;\n  }\n  getArea(id: number): Observable<Area> {\n    const area = Areas.find((a) => a.id === id);\n    return of(area);\n  }\n\n  toggleLike(id: number): void {\n    for (let i = 0; i < Areas.length; i++) {\n      if (Areas[i].id === id) Areas[i].liked = !Areas[i].liked;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}